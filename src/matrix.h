#ifndef MATRIX_H
#define MATRIX_H

/**
 * @brief Основная структура для представления матрицы в памяти.
 *
 * @details
 * Структура содержит указатель на двумерный массив данных и размерности матрицы.
 * Все операции библиотеки работают с этой структурой.
 *
 * @note Память для data должна выделяться динамически с помощью create_matrix
 * @warning Обязательно освобождать память с помощью free_matrix для избежания утечек.
 */
typedef struct {
    double** data; ///< Указатель на двумерный массив данных типа double
    int rows;      ///< Количество строк в матрице (должно быть > 0)
    int cols;      ///< Количество столбцов в матрице (должно быть > 0)
} Matrix;

// ============================================================================
// Базовые операции создания и освобождения
// ============================================================================

/**
 * @brief Создает новую матрицу с заданными размерами.
 *
 * @param rows Количество строк (должно быть > 0)
 * @param cols Количество столбцов (должно быть > 0)
 * @return Matrix Структура Matrix с выделенной памятью
 * @throws std::invalid_argument Если rows или cols <= 0
 * @throws std::bad_alloc Если не удалось выделить память
 * @note Все элементы матрицы инициализируются нулями
 * @warning Возвращаемую матрицу обязательно освободить free_matrix()
 *
 * @code
 * Matrix A = create_matrix(3, 3); // Создает матрицу 3x3
 * @endcode
 */
Matrix create_matrix(int rows, int cols);

/**
 * @brief Освобождает память, занятую матрицей.
 *
 * @param m Матрица, память которой нужно освободить
 * @note Безопасна для вызова с уже освобожденной или неинициализированной матрицей
 * @warning После вызова этой функции матрица становится невалидной и не должна использоваться
 *
 * @code
 * Matrix A = create_matrix(2, 2);
 * // Работа с матрицей...
 * free_matrix(A); // Освобождаем память
 * @endcode
 */
void free_matrix(Matrix m);

// ============================================================================
// Базовые арифметические операции
// ============================================================================

/**
 * @brief Складывает две матрицы.
 *
 * @param a Первая матрица-слагаемое
 * @param b Вторая матрица-слагаемое
 * @return Matrix Новая матрица - результат сложения
 * @throws std::invalid_argument Если размеры матриц не совпадают
 * @note Время выполнения: O(rows * cols)
 * @warning Размеры матриц должны быть одинаковыми: a.rows == b.rows && a.cols == b.cols
 *
 * @code
 * // [1 2]   [5 6]   [6 8]
 * // [3 4] + [7 8] = [10 12]
 * @endcode
 */
Matrix matrix_add(Matrix a, Matrix b);

/**
 * @brief Умножает две матрицы.
 *
 * @param a Первая матрица размером M×N
 * @param b Вторая матрица размером N×K
 * @return Matrix Новая матрица - результат умножения, размером M×K
 * @throws std::invalid_argument Если количество столбцов матрицы A не равно количеству строк матрицы B
 * @note Временная сложность: O(M * N * K)
 * @warning Матрицы должны быть совместимы: a.cols == b.rows
 *
 * @code
 * // [1 2]   [5 6]   [19 22]
 * // [3 4] × [7 8] = [43 50]
 * @endcode
 */
Matrix matrix_multiply(Matrix a, Matrix b);

/**
 * @brief Транспонирует матрицу.
 *
 * @param m Исходная матрица
 * @return Matrix Новая матрица - транспонированная версия
 * @note Размерность результата: rows = m.cols, cols = m.rows
 *
 * @code
 * //       [1 2 3]T   [1 4]
 * // result = [4 5 6]  = [2 5]
 * //               [3 6]
 * @endcode
 */
Matrix matrix_transpose(Matrix m);

// ============================================================================
// Вспомогательные функции
// ============================================================================

/**
 * @brief Выводит матрицу в консоль в читаемом формате.
 *
 * @param m Матрица для вывода
 * @details
 * - Форматирует числа с 2 знаками после запятой
 * - Выравнивает столбцы
 * - Для больших матриц (>10×8) показывает сокращенный вид
 * - Обрамляет каждую строку квадратными скобками
 *
 * @code
 * Matrix A = create_matrix(2, 2);
 * // Заполнение матрицы...
 * print_matrix(A);
 * // Вывод:
 * // [  1.00  2.00]
 * // [  3.00  4.00]
 * @endcode
 */
void print_matrix(Matrix m);

/**
 * @brief Создает матрицу из одномерного массива данных.
 *
 * @param data Указатель на одномерный массив данных
 * @param rows Количество строк в новой матрице
 * @param cols Количество столбцов в новой матрице
 * @return Matrix Новая матрица с данными из массива
 * @throws std::invalid_argument Если rows или cols <= 0
 * @throws std::bad_alloc Если не удалось выделить память
 * @note Данные копируются из массива построчно
 *
 * @code
 * double arr[] = {1, 2, 3, 4, 5, 6};
 * Matrix m = matrix_from_array(arr, 2, 3);
 * // Результат: 
 * // [1 2 3]
 * // [4 5 6]
 * @endcode
 */
Matrix matrix_from_array(double* data, int rows, int cols);

#endif